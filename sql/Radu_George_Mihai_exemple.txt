/* 11. Formulati în limbaj natural si implementati 5 cereri SQL complexe ce vor 
 * utiliza, în ansamblul lor, urmatoarele elemente: 
 * - operatie join pe cel putin 4 tabele 
 * - filtrare la nivel de linii 
 * - subcereri sincronizate în care intervin cel putin 3 tabele 
 * - subcereri nesincronizate în care intervin cel putin 3 tabele 
 * - grupari de date, functii grup, filtrare la nivel de grupuri
 * - ordonari
 * - utilizarea a cel putin 2 functii pe siruri de caractere, 2 functii pe date 
 * calendaristice, a functiilor NVL si DECODE, a cel putin unei expresii CASE  
 * utilizarea a cel putin 1 bloc de cerere (clauza WITH) */

-- 1
 
/* Afisati pentru toti soferi toate popasurile in care s-au oprit in ziua in care 
 * s-a oprit pentru prima data un sofer la restaurantul Ceptura din Ploiesti, sa
 * se afiseze daca soferul a venit cu un camion inmatriculat in Prahova sau in
 * alta regiune, numele, prenumele si salariul soferului, numele si tipul 
 * popasului la care s-a oprit, la ce ora a sosit, cat a stat, cati bani a
 * cheltuit la popas, si locatia popasului. Locatia sa fie afisata pe o singura
 * coloana numita Locatie popas. Un sofer cheltuieste la un popas in functie de
 * salariul sau, soferii cu un salariu mai mic de 3000lei inclusiv vor cheltui doar
 * 0.005% din salariu, cei cu salariu intre (3000, 4500] vor chelui 0.01% din 
 * salariu, iar restul vor cheltui 0.015% din salariu. Sa se ordoneze dupa nume
 * si dupa prenume. Sa se noteze restul coloanelor corespunzator */

WITH psp(ds) AS -- data primei opriri a unui sofer la Restaurantul Ceptura din Ploiesti
    (SELECT to_char(min(sip.data_sosire), 'dd-mm-yyyy')
     FROM locatie sl JOIN popas sp ON (sl.id_locatie = sp.id_locatie)
                     JOIN istoric_popasuri sip ON(sp.id_popas = sip.id_popas)
     WHERE initcap(sp.nume) = 'Restaurant Ceptura' and initcap(sl.localitate) = 'Ploiesti'
     )

SELECT DECODE((SELECT upper(substr(sc.nr_inmatriculare, 0, 2))
               FROM camion sc JOIN istoric_camioane_conduse sic ON(sc.id_camion = sic.id_camion)
                              JOIN angajat sa ON(sic.id_angajat = sa.id_angajat)
               WHERE sic.id_angajat = a.id_angajat 
                    and ip.data_sosire < NVL(sic.data_sfarsit, sysdate)
                    and ip.data_sosire > NVL(sic.data_inceput, sysdate)
               ), 'PH', 'Din Prahova', 'Alta regiune' 
              ) "Verifica camion din Prahova", 
       a.nume "Nume angajat", a.prenume "Prenume angajat", a.salariu "Salariu", 
       p.nume "Nume popas", initcap(p.tip_popas) "Tip popas",
       to_char(ip.data_sosire, 'hh24:mi') "Ora sosire",
       substr(numtodsinterval((ip.data_plecare - ip.data_sosire), 'DAY'), 12, 5) "Durata",
       (SELECT CASE WHEN salariu <=3000 THEN salariu * 0.005
                    WHEN salariu <=4500 THEN salariu * 0.01
                    WHEN salariu > 4500 THEN salariu * 0.015
               END 
        FROM angajat ssa
        WHERE a.id_angajat = ssa.id_angajat
       ) || 'lei' "bani cheltuiti",
       'Jud: ' || NVL(l.judet, '-') || ' Loc: ' || NVL(l.localitate, '-') ||
       ' Str. ' || NVL(l.strada, '-') || ' Nr. ' || NVL(to_char(l.nr), '-') "Locatie popas"
FROM istoric_popasuri ip JOIN angajat a ON(ip.id_angajat = a.id_angajat)
                         JOIN popas p ON(ip.id_popas = p.id_popas)
                         JOIN locatie l ON(p.id_locatie = l.id_locatie)
WHERE a.tip_angajat = 'SOFER' 
    and to_char(data_sosire, 'dd-mm-yyyy') = (SELECT * FROM psp)
ORDER BY a.nume, a.prenume;

-- 2

/* Sa se afiseze numele, prenumele, ce salariu isi doreste, cat de bine este
 * platit, vechimea la locul de munca curent, la ce firma lucreaza, si ce
 * depozit pazesc toti paznicii care lucreaza in depozite din localitatea in care
 * se afla cel mai vizitat popas de soferii de tir si doar pentru paznicii pentru
 * care a intrat sub paza lor in depozit cel putin un transport de marfa.
 * Daca un paznic are salariul mai mic decat media salariul din firma in care 
 * lucreaza, atunci el isi doreste o marire de salariu cu 200 lei, in caz contra 
 * doresc o marire de 100 lei. Consideram ca un paznic este bine platit daca are
 * un salariu mai mare decat 3000 lei inclusiv. Suma de 3000lei reprezinta media
 * salariilor paznicilor din Romania inidiferent de locatia pazita(nu intra doar
 * depozitele din gestiunea acestei baze de date). Sa se odroneze descrescator
 * dupa salariu si in caz de egalitate crescator dupa nume si prenume. */

WITH 
    avgs AS -- media salariilor paznicilor per firma
    (SELECT round(avg(salariu)) salariu, id_firma
     FROM angajat
     WHERE tip_angajat = 'PAZNIC'
     GROUP BY id_firma
     ),
    
    cm_vizitat_popas AS -- id-ul celui mai vizitat popas
    (
     SELECT id_popas popas
     FROM istoric_popasuri
     GROUP BY id_popas
     HAVING count(id_popas) = (SELECT max(count(id_popas))
                               FROM istoric_popasuri
                               GROUP BY id_popas
                               )
     ),
     
    loc_cm_vizitat_popas AS -- localitatea in care se afla cel mai vizitat popas
    (SELECT sl.localitate localitate
     FROM locatie sl JOIN popas sp ON (sl.id_locatie = sp.id_locatie),
          cm_vizitat_popas cmvp
     WHERE sp.id_popas = cmvp.popas
     )
     

SELECT a.nume "Nume paznic", a.prenume "Prenume paznic", 
        CASE WHEN a.salariu < avgs.salariu THEN a.salariu + 200
             ELSE a.salariu + 100
        END "Salariu dorit",
        DECODE((a.salariu-3000)-abs(a.salariu-3000)         
         , 0, 'bine platit', 'prost platit') "Cat de bine este platit", 
        concat(substr(numtodsinterval((sysdate - a.data_angajare), 'DAY'), 8, 3) ||' zile ',
            substr(numtodsinterval((sysdate - a.data_angajare), 'DAY'), 12, 5)) "Vechime angajat",
        f.nume "Nume firma",
        'Jud: ' || NVL(l.judet, '-') || ' Loc: ' || NVL(l.localitate, '-') ||
        ' Str. ' || NVL(l.strada, '-') || ' Nr. ' || NVL(to_char(l.nr), '-') "Locatie depozit repartizat",
        
        ( -- nr de colegi ai unui angajat
         SELECT DECODE(count(id_echipa_paza)-1, 0, 'Nu are colegi', 1, 
                 to_char(count(id_echipa_paza)-1) || ' coleg', 
                 to_char(count(id_echipa_paza)-1) || ' colegi')
         FROM angajat
         WHERE id_echipa_paza = a.id_echipa_paza
         GROUP BY id_echipa_paza
         ) "Nr. Colegi"
        
FROM echipa_paza ep JOIN firma f ON (ep.id_firma = f.id_firma)
                    JOIN angajat a ON (ep.id_echipa_paza = a.id_echipa_paza)
                    JOIN depozit d ON (ep.id_echipa_paza = d.id_echipa_paza)
                    JOIN locatie l ON (d.id_locatie = l.id_locatie)              
                    JOIN avgs ON (avgs.id_firma = f.id_firma),
    loc_cm_vizitat_popas cmvp 
             
WHERE a.tip_angajat = 'PAZNIC'
    and l.localitate in cmvp.localitate
    and ( -- cate transporturi de marfa au intrat in depozit sub paza fiecarui angajat
         SELECT count(depozit_destinatie)
         FROM transport
         WHERE depozit_destinatie = d.id_depozit
            and data_plecare > a.data_angajare
         GROUP BY depozit_destinatie
         ) >= 1
ORDER BY a.salariu desc, a.nume, a.prenume;

-- 3

/* Sa se afiseze data&ora de plecare, numele si prenumele soferului, ce salariu 
 * are, cat de bine este platit fata de media salariului din Ro care este de
 * 3500lei, ce marca de camion a condus, nr de inmatriculare al camionului,
 * sa se specifice in ce judet a fost inmatriculat camionul, 
 * iar pentru depozitul de plecare si destinatie sa se precizeze ce firma le detine
 * si in ce zona se afla, pentru fiecare transport al celor mai bine platiti
 * soferi din firmele unde sunt angajati, sa se afiseze doar transporturile
 * in care soferii au folosit acelasi camion ca cel actual pe care il conduc si
 * doar transporturile realizate incepand cu data in care a fost angajat ultimul
 * sofer de la toate firmele de transport.
 * Sa se ordoneze detaliile anterioare despre transport in ordine crescatoare 
 * dupa data de plecare din primul depozit */

WITH ac AS -- informatii despre cei mai bine platiti soferi din firma unde sunt angajati si camionul curent
    (SELECT c.id_camion, c.marca, c.nr_inmatriculare, a.id_angajat, a.nume, 
            a.prenume, a.salariu, a.id_firma
     FROM angajat a JOIN istoric_camioane_conduse ic ON (a.id_angajat = ic.id_angajat)
                    JOIN camion c ON(c.id_camion = ic.id_camion)
     WHERE (a.salariu, a.id_firma) in (SELECT max(salariu), id_firma -- obtine salariul mare din firma
                                       FROM angajat
                                       WHERE tip_angajat = 'SOFER'
                                       GROUP BY tip_angajat, id_firma
                                       )
        and ic.data_sfarsit is null
     )

SELECT
     to_char(t.data_plecare, 'dd-mm-yyyy') "Data plecare",
     to_char(t.data_plecare, 'hh24:mi') "Ora",-- data plecare transport
     ac.nume "Nume sofer", ac.prenume "Prenume", -- cine a condus acest transport
     ac.salariu "Salariu sofer", -- ce salariu are
     DECODE((ac.salariu-3500)-abs(ac.salariu-3500)         
     , 0, 'bine platit', 'prost platit') "Cat de bine este platit", 
    
     ac.marca "Camion",
     ac.nr_inmatriculare "Nr inmatriculare",
     CASE WHEN substr(ac.nr_inmatriculare, 0, 2)= 'MM' THEN 'Maramures'
          WHEN substr(ac.nr_inmatriculare, 0, 2)= 'IS' THEN 'Iasi'
          WHEN substr(ac.nr_inmatriculare, 0, 2)= 'CT' THEN 'Constanta'
          WHEN substr(ac.nr_inmatriculare, 0, 1)= 'B' THEN 'Bucuresti'
          ELSE 'Necunoscut'
     END "Inmatriculat in judetul",
    
    (SELECT sf.nume -- cine detine depozitul de plecare
     FROM firma sf JOIN depozit sd ON (sf.id_firma = sd.id_firma)
     WHERE sd.id_depozit = t.depozit_plecare) "Proprietar depozit plecare", 
    (SELECT 'Loc: ' || NVL(sl.localitate, '-') || ' Str. ' -- unde se afla depozitul
        || NVL(sl.strada, '-') || ' Nr. ' || NVL(to_char(sl.nr), '-')
     FROM depozit sd JOIN locatie sl ON (sd.id_locatie = sl.id_locatie)
     WHERE sd.id_depozit = t.depozit_plecare) "Locatie depozit plecare",
     
    (SELECT sf.nume -- cine detine depozitul de destinatie
     FROM firma sf JOIN depozit sd ON (sf.id_firma = sd.id_firma)
     WHERE sd.id_depozit = t.depozit_destinatie) "Proprietar depozit destinatie", 
    (SELECT 'Loc: ' || NVL(sl.localitate, '-') || ' Str. ' -- unde se afla depozitul 
        || NVL(sl.strada, '-') || ' Nr. ' || NVL(to_char(sl.nr), '-')
     FROM depozit sd JOIN locatie sl ON (sd.id_locatie = sl.id_locatie)
     WHERE sd.id_depozit = t.depozit_destinatie) "Locatie depozit destinatie"
     
FROM transport t JOIN ac ON(t.id_camion = ac.id_camion)
            
WHERE t.data_plecare > (SELECT max(data_angajare)
                        FROM angajat
                        WHERE tip_angajat = 'SOFER')
ORDER BY t.data_plecare;

-- 4

/* Sa se afiseze pentru transporturile realizate dupa prima zi de luni de la data
 * primei angajari a unui sofer in firma care detine camionul care a realizat 
 * transportul, numele marfii, cantitatea de marfa, tipul marfii transportate
 * (putem avea alimente, imbracaminte, incaltaminte), marca, nr de inmatriculare
 * si judetul in care a fost inmatriculat camionul cu care a fost realizat 
 * transportul, data si ora la care a plecat camionul din depozitul de plecare, 
 * ce firma detine depozitul de plecare, in ce locatie se afla depozitul de 
 * plecare, anaog pentru cel de destinatie. Sa se ordoneze crescator dupa data 
 * si ora de plecare, si descrescator dupa cantitatea de marfa transportata */

WITH depozit_plecare AS
    (SELECT id_depozit, sf.nume detinator, 'Loc: ' || NVL(sl.localitate, '-')
        || ' Str. ' || NVL(sl.strada, '-') || ' Nr. ' || NVL(to_char(sl.nr), '-') locatie
    FROM firma sf JOIN depozit sd ON (sf.id_firma = sd.id_firma)
                  JOIN locatie sl ON (sd.id_locatie = sl.id_locatie)
    ),
    depozit_destinatie AS
    (SELECT id_depozit, sf.nume detinator, 'Loc: ' || NVL(sl.localitate, '-')
        || ' Str. ' || NVL(sl.strada, '-') || ' Nr. ' || NVL(to_char(sl.nr), '-') locatie
     FROM firma sf JOIN depozit sd ON (sf.id_firma = sd.id_firma)
                   JOIN locatie sl ON (sd.id_locatie = sl.id_locatie)
     )
    
SELECT lm.nume "Marfa", lm.cantitate "Cantitate marfa",
       DECODE(lower(lm.nume), 'carne miel', 'alimente', 'carne porc', 'alimente',
              'carne pui', 'alimente', 'lapte', 'alimente', 'rosii', 'alimente',
              'ardei', 'alimente', 'tricouri', 'imbracaminte', 'hanorace', 'imbracaminte',
              'rochii', 'imbracaminte', 'fuste', 'imbracaminte', 'blugi', 'imbracaminte',
              'pantofi', 'incaltaminte', 'necunoscut') "Tip aliment",
       c.marca "Marca camion", c.nr_inmatriculare "Nr. inmatriculare", 
       CASE WHEN substr(c.nr_inmatriculare, 0, 2)= 'MM' THEN 'Maramures'
            WHEN substr(c.nr_inmatriculare, 0, 2)= 'IS' THEN 'Iasi'
            WHEN substr(c.nr_inmatriculare, 0, 2)= 'CT' THEN 'Constanta'
            WHEN substr(c.nr_inmatriculare, 0, 1)= 'B' THEN 'Bucuresti'
            ELSE 'Necunoscut'
       END "Inmatriculat in judetul",
       to_char(t.data_plecare, 'dd-mm-yyyy hh24:mi') "Data si ora plecare",
       round(months_between(sysdate, t.data_plecare)) "Nr. luni de la transport",
       dp.detinator "Detinator depozit plecare", dp.locatie "Locatie depozit plecare", 
       dd.detinator "Detinator depozit destinatie", dd.locatie "Locatie depozit destinatie"

FROM transport t JOIN camion c ON(t.id_camion = c.id_camion)
                 JOIN firma f ON(c.id_firma = f.id_firma)
                 JOIN inventar_transport it ON(t.id_transport = it.id_transport)
                 JOIN lot_marfa lm ON(it.id_lot_marfa = lm.id_lot_marfa)
                 JOIN depozit_plecare dp ON(dp.id_depozit = t.depozit_plecare) 
                 JOIN depozit_destinatie dd ON(dd.id_depozit = t.depozit_destinatie) 
                 

WHERE data_plecare >= next_day((SELECT max(sa.data_angajare)
                                FROM angajat sa JOIN istoric_camioane_conduse sic ON(sa.id_angajat = sic.id_angajat)
                                                  JOIN camion sc ON(sic.id_camion = sc.id_camion)
                                WHERE sa.tip_angajat = 'SOFER' and sa.id_firma = f.id_firma
                                GROUP BY tip_angajat
                                ), 'MONDAY')
                                
ORDER BY t.data_plecare, lm.cantitate desc;

-- 5

/* Pentru toti soferii care lucreaza la una din firmele Road Logistics, Transibo
 * sau Lextom Trans Asd si care detin cel putin 2 categorii de permis sa se
 * afiseze numele&prenumele soferului, cat de experimentat e(<1an e INCEPATOR,
 * <700 zile AVANSAT si in rest PROFESIONIST), cat de bine este platit(se considera
 * ca un sofer este bine platit daca are un salariu>=4000lei) marca camionului 
 * si nr de inmatriculare al camionului pe care l-a condus in acel transport, 
 * data in care a plecat camionul din depozit cu marfa, detinatorul depozitului 
 * de plecare si destinatie, si analog pentru cel de destinatie */

WITH soferi AS -- soferii care detin cel putin 2 categorii de permis auto si care
    -- lucreaza la una din firmele: Road Logistics, Transibo, Lextom Trans Asd
    (SELECT a.id_angajat id_sofer
     FROM angajat a JOIN permis p ON (a.id_angajat = p.id_angajat)
                    JOIN firma f ON (f.id_firma = a.id_firma)
     WHERE initcap(f.nume) = 'Road Logistics' or initcap(f.nume) = 'Transibo'
        or initcap(f.nume) = 'Lextom Trans Asd'
     GROUP BY a.id_angajat
     HAVING count(p.id_angajat) >= 2
     )

SELECT a.nume "Nume sofer", a.prenume "Prenume",       
       CASE WHEN to_number(substr(numtodsinterval((sysdate - a.data_angajare), 'DAY'), 2, 9)) <= 356 THEN 'INCEPATOR'
            WHEN to_number(substr(numtodsinterval((sysdate - a.data_angajare), 'DAY'), 2, 9)) <= 700 THEN 'AVANSAT'
            ELSE 'PROFESIONIST'
       END "Experienta",
       DECODE((a.salariu-4000)-abs(a.salariu-4000), 0, 'bine platit', 'prost platit') "Cat de bine este platit", 
       c.marca "Marca camion", c.nr_inmatriculare "Nr. inmatriculare",
       (SELECT sf.nume -- cine detine depozitul de plecare
        FROM firma sf JOIN depozit sd ON (sf.id_firma = sd.id_firma)
        WHERE sd.id_depozit = t.depozit_plecare) "Proprietar depozit plecare", 
       (SELECT 'Loc: ' || NVL(sl.localitate, '-') || ' Str. ' -- unde se afla depozitul
                || NVL(sl.strada, '-') || ' Nr. ' || NVL(to_char(sl.nr), '-')
        FROM depozit sd JOIN locatie sl ON (sd.id_locatie = sl.id_locatie)
        WHERE sd.id_depozit = t.depozit_plecare) "Locatie depozit plecare",
        
       (SELECT sf.nume -- cine detine depozitul de destinatie
        FROM firma sf JOIN depozit sd ON (sf.id_firma = sd.id_firma)
        WHERE sd.id_depozit = t.depozit_destinatie) "Proprietar depozit destinatie", 
       (SELECT 'Loc: ' || NVL(sl.localitate, '-') || ' Str. ' -- unde se afla depozitul 
                || NVL(sl.strada, '-') || ' Nr. ' || NVL(to_char(sl.nr), '-')
        FROM depozit sd JOIN locatie sl ON (sd.id_locatie = sl.id_locatie)
        WHERE sd.id_depozit = t.depozit_destinatie) "Locatie depozit destinatie"    
       
FROM angajat a JOIN istoric_camioane_conduse ic ON(a.id_angajat = ic.id_angajat)
               JOIN camion c ON(ic.id_camion = c.id_camion)
               JOIN transport t ON(c.id_camion = t.id_camion)
WHERE a.id_angajat in (SELECT * FROM soferi)
    and ic.data_sfarsit is null;


/* 12. Implementarea a 3 operatii de actualizare sau suprimare a datelor 
 * utilizand subcereri. */

/* pentru inceputul verii fiecare firma de paza ofera o marire de salariu cu 75lei
 * angajatilor cu cel mai mic salariu din firma */ 
UPDATE ANGAJAT
SET salariu = salariu + 75
WHERE (salariu, id_firma) in (SELECT min(salariu), id_firma
                              FROM ANGAJAT
                              WHERE tip_angajat = 'PAZNIC'
                              GROUP BY id_firma
                              );
                          
/* pe data de 2 aprilie 2021 a intrat in inventarierea unui depozit din 
 * jud Tulcea loc Tulcea str. Unirii nr. 213 un lot de marfa
 * de carne de miel a carei cantitate a fost introdusa gresit in baza de date, 
 * in loc 400 de kg de carne a fost introdusa valoarea 100 */
UPDATE LOT_MARFA
SET cantitate = 400
WHERE lower(nume) = 'carne miel' 
    AND id_lot_marfa IN 
        (SELECT id_lot_marfa
         FROM LOCATIE l JOIN DEPOZIT d ON(l.id_locatie = d.id_locatie)
                        JOIN INVENTAR_DEPOZIT id ON(d.id_depozit = id.id_depozit)
         WHERE initcap(localitate) = 'Tulcea' AND initcap(strada)='Unirii' AND nr = 213
                AND to_char(id.data_sosire, 'dd-mm-yyyy') = '02-04-2021'
         );

/* stregem din baza de date popasurile care nu au fost vizitate pana acum de
 * niciun sofer de tir */
DELETE FROM POPAS
WHERE id_popas not in (select id_popas FROM ISTORIC_POPASURI);

commit; -- salvam modificarile facute

/* 16. Formulati in limbaj natural si implementati in SQL: o cerere ce utilizeaza
 * operatia outer-join pe minimum 4 tabele si doua cereri ce utlizeaza operatia
 * division. */

-- outer join - versiunea 1 va fi optimizata la cerinta 17

/* Pentru fiecare camion sa se afiseze marca, nr. de inmatriculare, numele firmei,
 * de ce soferi a fost condus(pentru fiecare sofer sa se precizeze numele, 
 * prenumele si salariul, in cazul in care un camion nu a fost condus de un
 * sofer sa se inlocuiasca aceste coloane cu '-'), dar si data de plecare pentru
 * fiecare transport realizat de sofer cu acest camion. Daca unui angajat i-a 
 * fost alocat un camion dar nu a realizat niciun transport in loc de data sa 
 * fie afisat mesajul 'nu a realizat transporturi'. Sa se afiseze informatiile
 * despre angajatii doar daca sunt soferi, au fost angajati inainte de data de
 * 13 sept 2020 si detin cel putin un permis auto, in cazul in care un camion a
 * fost condus de un sofer care nu indeplineste aceste cerinte se vor inlocui 
 * coloanele cu informatii despre angajat cu '-'. 
 * Sa se excluda camioanele de marca IVECO. */

WITH ang AS -- soferii angajati inainte de 13 sept 2020 care detin cel mult 2 permise auto
    (SELECT p.id_angajat, a.nume, a.prenume, a.salariu
     FROM angajat a JOIN permis p ON (a.id_angajat = p.id_angajat)
     WHERE a.tip_angajat = 'SOFER'
        and to_char(a.data_angajare, 'dd-mm-yyyy') < '13-9-2020' 
     GROUP BY p.id_angajat, a.nume, a.prenume, a.salariu
     HAVING count(p.id_angajat) >= 1  -- care detine cel putin 1 permis  
     )

SELECT c.marca, c.nr_inmatriculare, f.nume, 
       NVL(a.nume, '-') "Nume sofer", NVL(a.prenume, '-') "Prenume sofer", 
       NVL(to_char(a.salariu), '-') "Salariu sofer",
       NVL(to_char(t.data_plecare, 'dd-mm-yyyy'), 'nu a realizat transporturi') "Data transport"
FROM camion c FULL OUTER JOIN firma f ON (c.id_firma = f.id_firma)
              FULL OUTER JOIN istoric_camioane_conduse icc ON (c.id_camion = icc.id_camion)
              FULL OUTER JOIN ang a ON (icc.id_angajat = a.id_angajat)
              FULL OUTER JOIN transport t ON (c.id_camion = t.id_camion)
WHERE
    upper(c.marca) != 'IVECO' and
    f.tip_firma = 'TRANSPORT' and 
    ((icc.data_inceput < t.data_plecare and t.data_plecare <= NVL(icc.data_sfarsit, sysdate)
     )   or t.data_plecare is null
    );
    
-- division

-- 1

/* Sa se afiseze pentru fiecare sofer numele, prenumele, salariul si nr. de
 * permise auto detinute, care au condus cel mult aceleasi marci de camioane
 * precum soferul Ion Vasile. Sa se ordoneze descrescator dupa nr. de permise
 * detinute, descrescator dupa salariu in caz de egalitate si in final crescator
 * dupa nume&prenume */

WITH marca_camion_ang AS -- marcile de camioane conduse de angajatul Ion Vasile
       (select c.marca
        from camion c join istoric_camioane_conduse icc on (c.id_camion = icc.id_camion)
                   join angajat a on (icc.id_angajat = a.id_angajat)
        where initcap(a.nume) = 'Ion' and initcap(a.prenume) = 'Vasile'
        ),

    division_ang AS -- id-urile angajatilor care conduc cel mult aceleasi marci de camioane precum ang Ion Vasile (inclusiv el)
       (select icc.id_angajat id_angajat
        from camion c join istoric_camioane_conduse icc on (c.id_camion = icc.id_camion)
        where c.marca in 
                    (SELECT *
                     FROM marca_camion_ang
                     )
        group by icc.id_angajat
        having count(*) <=
                    (SELECT count(*)
                     FROM marca_camion_ang
                     )
                     
        MINUS
        
        select icc.id_angajat
        from camion c join istoric_camioane_conduse icc on (c.id_camion = icc.id_camion)
        where c.marca not in (SELECT * 
                              FROM marca_camion_ang
                              )               
        )

SELECT a.nume, a.prenume, a.salariu, count(*) "Nr. permise auto"
FROM angajat a JOIN division_ang da ON (a.id_angajat = da.id_angajat)
               JOIN permis p ON (a.id_angajat = p.id_angajat)
WHERE not (initcap(a.nume) = 'Ion' and initcap(a.prenume) = 'Vasile')
GROUP BY a.nume, a.prenume, a.salariu
ORDER BY 4 desc, 3 desc, 1, 2;

-- 2

/* Sa se afiseze id-urile tuturor popasurilor vizitate de toti soiferii cu
 * salariul de 5000lei folosind implementarea DIVISION-ului cu dublu NOT EXISTS */

SELECT DISTINCT id_popas
FROM istoric_popasuri ip
WHERE NOT EXISTS
    (SELECT 1
     FROM angajat a
     WHERE tip_angajat = 'SOFER' and salariu = 5000
     AND NOT EXISTS
        (SELECT 'x'
         FROM istoric_popasuri sip
         WHERE a.id_angajat = sip.id_angajat
            and sip.id_popas = ip.id_popas
         )
     );

-- 3

/* Sa se afiseze pentru totate popasurile vizitate de toti soferii cu salariul
 * de 5000 lei tipul popasului, numele sau si locatia unde se afla. Sa se
 * utilizeze alta metoda de implementare fata de punctul anterior. */

WITH sofer AS -- soferi cu salariu de 5000 lei
    (SELECT id_angajat
     FROM angajat
     WHERE tip_angajat = 'SOFER' and salariu = 5000
     ),
    
    pop AS -- popasurile vizitate de toti soferii cu salariu de 5000 lei
    (SELECT id_popas id_popas
     FROM istoric_popasuri
     WHERE id_angajat IN (SELECT *
                          FROM sofer
                          )
     GROUP BY id_popas
     HAVING count(id_angajat) = (SELECT count(*)
                                 FROM sofer
                                 )
     )

SELECT p.tip_popas "Tip popas", p.nume "Nume popas",
       'Jud: ' || NVL(l.judet, '-') || ' Loc: ' || NVL(l.localitate, '-') ||
       ' Str. ' || NVL(l.strada, '-') || ' Nr. ' || NVL(to_char(l.nr), '-') "Locatie popas"
FROM popas p JOIN pop ON (p.id_popas = pop.id_popas)
             JOIN locatie l ON (p.id_locatie = l.id_locatie);


/* 17. Optimizarea unei cereri, aplicand regulile de optimizare ce deriva din
 * proprietatile operatorilor algebrei relationale. */

-- s-a optimizat cererea de la ex. 16 cu outer-join

/* Pentru fiecare camion sa se afiseze marca, nr. de inmatriculare, numele firmei,
 * de ce soferi a fost condus(pentru fiecare sofer sa se precizeze numele, 
 * prenumele si salariul, in cazul in care un camion nu a fost condus de un
 * sofer sa se inlocuiasca aceste coloane cu '-'), dar si data de plecare pentru
 * fiecare transport realizat de sofer cu acest camion. Daca unui angajat i-a 
 * fost alocat un camion dar nu a realizat niciun transport in loc de data sa 
 * fie afisat mesajul 'nu a realizat transporturi'. Sa se afiseze informatiile
 * despre angajatii doar daca sunt soferi, au fost angajati inainte de data de
 * 13 sept 2020 si detin cel putin un permis auto, in cazul in care un camion a
 * fost condus de un sofer care nu indeplineste aceste cerinte se vor inlocui 
 * coloanele cu informatii despre angajat cu '-'. 
 * Sa se excluda camioanele de marca IVECO. */

WITH ang AS -- soferii angajati inainte de 13 sept 2020 care detin cel mult 2 permise auto
    (SELECT p.id_angajat, a.nume, a.prenume, a.salariu
     FROM angajat a JOIN permis p ON (a.id_angajat = p.id_angajat)
     WHERE a.tip_angajat = 'SOFER'
        and to_char(a.data_angajare, 'dd-mm-yyyy') < '13-9-2020' 
     GROUP BY p.id_angajat, a.nume, a.prenume, a.salariu
     HAVING count(p.id_angajat) >= 1  -- care detine cel putin 1 permis  
     ),
     tc AS
     (SELECT icc.id_camion, icc.id_angajat, t.data_plecare, c.marca, c.nr_inmatriculare, c.id_firma
      FROM camion c FULL OUTER JOIN istoric_camioane_conduse icc ON (c.id_camion = icc.id_camion)
                    FULL OUTER JOIN transport t ON (c.id_camion = t.id_camion)
      WHERE c.marca != 'IVECO' and
            t.data_plecare is null or icc.data_inceput is null or 
            (icc.data_inceput < t.data_plecare and t.data_plecare <= NVL(icc.data_sfarsit, sysdate))
      )
    
SELECT tc.marca, tc.nr_inmatriculare, f.nume, 
       NVL(a.nume, '-') "Nume sofer", NVL(a.prenume, '-') "Prenume sofer", 
       NVL(to_char(a.salariu), '-') "Salariu sofer",
       NVL(to_char(tc.data_plecare, 'dd-mm-yyyy'), 'nu a realizat transporturi') "Data transport" 
FROM tc FULL OUTER JOIN ang a ON (tc.id_angajat = a.id_angajat)
        FULL OUTER JOIN firma f ON (tc.id_firma = f.id_firma)
WHERE f.tip_firma = 'TRANSPORT';              

